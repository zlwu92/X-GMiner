> Adjacency matrix of pattern:
[[0 1 1 1 1]
 [1 0 1 1 1]
 [1 1 0 0 0]
 [1 1 0 0 1]
 [1 1 0 1 0]]
res_idx={1: 0, 4: 3}

> Logical plan:
for v0 in V:
  for v1 in V^N(v0):
    for v2 in V^N(v0)^N(v1):
      for v3 in V^N(v0)^N(v1)-N(v2):
        for v4 in V^N(v0)^N(v1)-N(v2)^N(v3):
          counter ++
allocator.map={'11:V': A0, '110:V': A1}
> Before optimized
for v0 in #ALL_VERTEX: | (:V)
    for v1 in N(v0): | (1:V)
      #0 = intersect(N(v0), N(v1)) | (1:V->11:V)
      for v2 in #0: | (11:V)
        #1 = difference(#0, N(v2)) | (11:V->110:V)
        for v3 in #1: | (110:V)
          count += cnt_intersect(#1, N(v3)) | (110:V->1101:V)
> After optimize
for v0 in #ALL_VERTEX: | (:V)
    for v1 in N(v0): | (1:V)
      #0 = intersect(N(v0), N(v1)) | (1:V->11:V)
      for v2 in #0: | (11:V)
        #1 = difference(#0, N(v2)) | (11:V->110:V)
        for v3 in #1: | (110:V)
          count += cnt_intersect(#1, N(v3)) | (110:V->1101:V)
