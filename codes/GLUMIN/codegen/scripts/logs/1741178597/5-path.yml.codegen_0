> Adjacency matrix of pattern:
[[0 1 0 0 0]
 [1 0 1 0 0]
 [0 1 0 1 0]
 [0 0 1 0 1]
 [0 0 0 1 0]]
res_idx={}

> Logical plan:
for v0 in V:
  for v1 in V^N(v0):
    for v2 in V-N(v0)^N(v1):
      for v3 in V-N(v0)-N(v1)^N(v2):
        for v4 in V-N(v0)-N(v1)-N(v2)^N(v3):
          counter ++
allocator.map={'01:V': A0, '00:V': -1, '-01:V': A1, '001:V': A2, '000:V': -1, '--01:V': A3, '-001:V': A4}
> Before optimized
for v0 in #ALL_VERTEX: | (:V)
    for v1 in N(v0): | (1:V)
      #0 = difference(N(v1), N(v0)) | (-1:V->01:V)
      for v2 in #0: | (01:V)
        #1 = difference(N(v2), N(v1)) | (--1:V->-01:V)
        #2 = difference(#1, N(v0)) | (-01:V->001:V)
        for v3 in #2: | (001:V)
          #3 = difference(N(v3), N(v2)) | (---1:V->--01:V)
          #4 = difference(#3, N(v1)) | (--01:V->-001:V)
          count += cnt_difference(#4, N(v0)) | (-001:V->0001:V)
> After optimize
for v0 in #ALL_VERTEX: | (:V)
    for v1 in N(v0): | (1:V)
      #0 = difference(N(v1), N(v0)) | (-1:V->01:V)
      for v2 in #0: | (01:V)
        #1 = difference(N(v2), N(v1)) | (--1:V->-01:V)
        #2 = difference(#1, N(v0)) | (-01:V->001:V)
        for v3 in #2: | (001:V)
          #3 = difference(N(v3), N(v2)) | (---1:V->--01:V)
          #4 = difference(#3, N(v1)) | (--01:V->-001:V)
          count += cnt_difference(#4, N(v0)) | (-001:V->0001:V)
