> Adjacency matrix of pattern:
[[0 1 0 1 1]
 [1 0 1 1 0]
 [0 1 0 0 1]
 [1 1 0 0 0]
 [1 0 1 0 0]]
res_idx={1: 0}

> Logical plan:
for v0 in V:
  for v1 in V^N(v0):
    for v2 in V-N(v0)^N(v1):
      for v3 in V^N(v0)^N(v1)-N(v2):
        for v4 in V^N(v0)-N(v1)^N(v2)-N(v3):
          counter ++
allocator.map={'01:V': A0, '11:V': A1, '10:V': A2, '110:V': A3, '101:V': A4}
> Before optimized
for v0 in #ALL_VERTEX: | (:V)
    for v1 in N(v0): | (1:V)
      #0 = difference(N(v1), N(v0)) | (-1:V->01:V)
      #1 = intersect(N(v0), N(v1)) | (1:V->11:V)
      #2 = difference(N(v0), N(v1)) | (1:V->10:V)
      for v2 in #0: | (01:V)
        #3 = difference(#1, N(v2)) | (11:V->110:V)
        #4 = intersect(#2, N(v2)) | (10:V->101:V)
        for v3 in #3: | (110:V)
          count += cnt_difference(#4, N(v3)) | (101:V->1010:V)
> After optimize
for v0 in #ALL_VERTEX: | (:V)
    for v1 in N(v0): | (1:V)
      #0 = difference(N(v1), N(v0)) | (-1:V->01:V)
      #1 = intersect(N(v0), N(v1)) | (1:V->11:V)
      #2 = difference(N(v0), N(v1)) | (1:V->10:V)
      for v2 in #0: | (01:V)
        #3 = difference(#1, N(v2)) | (11:V->110:V)
        #4 = intersect(#2, N(v2)) | (10:V->101:V)
        for v3 in #3: | (110:V)
          count += cnt_difference(#4, N(v3)) | (101:V->1010:V)
